{"version":3,"file":"static/js/500.952f32e3.chunk.js","mappings":"mMAKO,SAASA,EAAT,GAA8B,IAAD,EAARC,EAAQ,EAARA,KAClBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,KAAD,CAASC,GAAE,kBAAaH,EAAKI,IAAMC,MAAO,CAAEC,KAAML,GAAlD,mBAEGD,EAAKO,sBAFR,QAE0B,SAG/B,CCXM,SAASC,EAAT,GAA+B,IAAVC,EAAS,EAATA,OACxB,OACI,wBACKA,EAAOC,KAAI,SAAAC,GAAU,OACpB,yBACE,SAACZ,EAAD,CAAWC,KAAMW,KADVA,EAAMP,GAGd,KAGd,C,8ICXM,SAASQ,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAM1B,OACE,+BACE,kBAAMC,SAPa,SAAAC,GACrBA,EAAEC,iBACFH,EAASE,EAAEE,OAAOC,YAAYC,MAC/B,EAIG,WACE,kBAAOC,KAAK,iBACZ,2CAIP,C,YCwBD,EAjCe,WAAO,IAAD,EACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4CC,EAAAA,EAAAA,UAAS,MAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAS,UAAGL,EAAaM,IAAI,gBAApB,QAAgC,IAE/CC,EAAAA,EAAAA,YAAU,WACR,IAAKF,EAAW,OAAOD,EAAkB,MAEzC,IAAMI,EAAmB,mCAAG,6GAEGC,EAAAA,EAAAA,kBAA4BJ,GAF/B,OAElBK,EAFkB,OAGxBN,EAAkBM,EAAahC,KAAKiC,SAHZ,gDAKxBC,QAAQC,IAAI,KAAMC,SALM,yDAAH,qDAQzBN,GACD,GAAE,CAACH,EAAWF,IAQf,OACE,iCACE,SAACb,EAAD,CAAWC,SARc,SAAAO,GAGxBG,EADW,KAATH,EAAc,CAAET,MAAOS,GAAS,CAAC,EAEpC,IAKCK,IAAkB,SAACjB,EAAA,EAAD,CAAWC,OAAQgB,MAG3C,C,8FCpCKY,EAAS,mCAEFN,EAAY,CACjBO,YADiB,WACF,OAAD,qHACKC,EAAAA,EAAAA,IAAA,0FADL,cACZC,EADY,yBAIXA,GAJW,4CAKnB,EAEKC,kBARiB,SAQCC,GAAU,OAAD,uHACVH,EAAAA,EAAAA,IAAA,6CACmBG,EADnB,oBACsCL,IAF5B,uBACxBrC,EADwB,EACxBA,KADwB,kBAItBA,GAJsB,4CAK9B,EAEK2C,eAfe,SAeAC,GAAU,OAAD,qHACHL,EAAAA,EAAAA,IAAA,6CACmBK,EADnB,4BAC8CP,EAD9C,oBADG,cACpBG,EADoB,yBAInBA,GAJmB,4CAK7B,EAEMK,kBAtBc,SAsBID,GAAU,OAAD,qHACPL,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,4BAC4CP,EAD5C,2BADO,cACxBG,EADwB,yBAIvBA,GAJuB,4CAKjC,EAEOM,kBA7Ba,SA6BKC,GAAa,OAAD,qHACXR,EAAAA,EAAAA,IAAA,4DACgCF,EADhC,iCAC+DU,EAD/D,gCADW,cAC5BP,EAD4B,yBAI3BA,GAJ2B,4CAKrC,E","sources":["components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.jsx","components/SearchBar/SearchBar.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n\nexport function MovieItem({ data }) {\n    const location = useLocation();\n    \n    return (\n      <NavLink to={`/movies/${data.id}`} state={{ from: location }}\n      >\n        {data.original_title ?? \"Movie\"}\n      </NavLink>\n    );\n};\n\nMovieItem.propTypes = {\n  data: PropTypes.array.isRequired\n}","import { MovieItem } from \"components/MovieItem/MovieItem\";\nimport PropTypes from 'prop-types';\n\nexport function MovieList ({movies}) {\n    return (\n        <ul>\n            {movies.map(movie => {return (\n              <li key={movie.id}>\n                <MovieItem data={movie} />\n              </li>\n            );})}\n        </ul>\n    )\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.object.isRequired\n}\n\n","import PropTypes from 'prop-types';\n\nexport function SearchBar({ onSearch }) {\n  const onSearchSubmit = e => {\n    e.preventDefault();\n    onSearch(e.target.searchValue.value);\n  };\n\n  return (\n    <>\n      <form onSubmit={onSearchSubmit}>\n        <input name=\"searchValue\" />\n        <button>Search</button>\n      </form>\n    </>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired\n}\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { MoviesApi } from 'services/api';\n\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { MovieList } from 'components/MovieList/MovieList';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchedMovies, setSearchedMovies] = useState(null);\n  const movieName = searchParams.get('movie') ?? '';\n\n  useEffect(() => {\n    if (!movieName) return setSearchedMovies(null);\n\n    const fetchSearchedMovies = async () => {\n      try {\n        const searchedData = await MoviesApi.fetchMovieByQuery(movieName);\n        setSearchedMovies(searchedData.data.results);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchSearchedMovies();\n  }, [movieName, searchedMovies]);\n    \n     const updateQueryString = name => {\n       const nextParams =\n         name !== '' ? { movie: name } : {};\n       setSearchParams(nextParams);\n     };\n\n  return (\n    <>\n      <SearchBar onSearch={updateQueryString} />\n      {searchedMovies && <MovieList movies={searchedMovies} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from \"axios\";\n\nconst APIKEY = \"b9984943b63ba7234c73c01c632259d1\";\n\nexport const MoviesApi = {\n  async fetchMovies() {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/trending/all/day?api_key=b9984943b63ba7234c73c01c632259d1`\n    );\n    return response;\n  },\n\n  async fetchMovieDetails(movieID) {\n    const {data} = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieID}?api_key=${APIKEY}`\n    );\n      return data\n    },\n  \n    async fetchMovieCast(movieId) {\n        const response = await axios.get(\n            `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${APIKEY}&language=en-US`\n        );\n        return response\n    },\n\n     async fetchMovieReviews(movieId) {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${APIKEY}&language=en-US&page=1`\n        );\n        return response\n    },\n     \n      async fetchMovieByQuery(movieQuery) {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/search/movie?api_key=${APIKEY}&language=en-US&query=${movieQuery}&page=1&include_adult=false`\n        );\n        return response\n    },\n    \n};\n\n\n"],"names":["MovieItem","data","location","useLocation","to","id","state","from","original_title","MovieList","movies","map","movie","SearchBar","onSearch","onSubmit","e","preventDefault","target","searchValue","value","name","useSearchParams","searchParams","setSearchParams","useState","searchedMovies","setSearchedMovies","movieName","get","useEffect","fetchSearchedMovies","MoviesApi","searchedData","results","console","log","message","APIKEY","fetchMovies","axios","response","fetchMovieDetails","movieID","fetchMovieCast","movieId","fetchMovieReviews","fetchMovieByQuery","movieQuery"],"sourceRoot":""}