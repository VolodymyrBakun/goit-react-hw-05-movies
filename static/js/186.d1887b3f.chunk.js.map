{"version":3,"file":"static/js/186.d1887b3f.chunk.js","mappings":"yNAyCA,UArCA,WACE,OAA8BA,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAS,mCAAG,6GAESC,EAAAA,EAAAA,kBAA4BJ,GAFrC,OAERK,EAFQ,OAGdN,EAAWM,EAASC,KAAKC,SAHX,gDAKdC,QAAQC,IAAI,KAAMC,SALJ,yDAAH,qDAQfP,GAToB,CAUrB,GAAE,CAACH,KAGF,8BACGF,IACC,0BACsB,IAAnBA,EAAQa,SACP,qEAEDb,EAAQa,OAAS,GAChBb,EAAQc,KAAI,SAAAC,GAAM,OAChB,gBAAIC,UAAU,cAAd,WACE,oCAAYD,EAAOE,WACnB,uCAAeF,EAAOG,aAFSH,EAAOI,GADxB,QAU7B,C","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MoviesApi } from 'services/api';\n\nfunction Reviews() {\n  const [reviews, setReviews] = useState(null);\n  const { movieID } = useParams();\n\n  useEffect(() => {\n    if (!movieID) return;\n    const fetchCast = async () => {\n      try {\n        const response = await MoviesApi.fetchMovieReviews(movieID);\n        setReviews(response.data.results);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchCast();\n  }, [movieID]);\n\n  return (\n    <>\n      {reviews && (\n        <ul>\n          {reviews.length === 0 && (\n            <li>We don't have any reviews for this movie</li>\n          )}\n          {reviews.length > 0 &&\n            reviews.map(review => (\n              <li className=\"review-item\" key={review.id}>\n                <p>Author: {review.author}</p>\n                <p>Character: {review.content}</p>\n              </li>\n            ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default Reviews;\n"],"names":["useState","reviews","setReviews","movieID","useParams","useEffect","fetchCast","MoviesApi","response","data","results","console","log","message","length","map","review","className","author","content","id"],"sourceRoot":""}